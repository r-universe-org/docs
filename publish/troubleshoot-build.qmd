---
title: "Trouble shoot package builds"
---

## How often is data updated? {#data-updates}

- The system checks package Git repositories and the registry for changes every hour.  
- If changes are detected:  
   - The workflow starts building the affected packages.  
   - Upon completion, the packages are uploaded to R-universe.  

## Can the package build process be customized with custom options/tools/variables?

No, customization is not possible, except for addressing third-party system requirements (covered in the next section).  
Think of R-universe as your own mini-CRAN. 
The build environment is very similar to CRAN's, so if a package builds successfully on CRAN, it is likely to work on R-universe.  

This restriction ensures that packages deployed on R-universe are reproducible, work seamlessly on user machines, and do not rely on custom settings or tools.  

## What if the Git repository  is not a ready-to-build source package?

For repositories requiring additional preparation before building, you can add a [script](https://github.com/r-universe-org/build-source/blob/5830b8aa92d5524b3af6d1b617e605d1a2558543/entrypoint.sh#L50-L57) at the root of the package:  

- An R script named `bootstrap.R`, or  
- A shell script named `.prepare`.

These scripts will be executed before `R CMD build`.

Examples of actions performed by the script:

- Initializing a Git submodule.  
- Running `roxygen2` (if `.Rd` files are not committed to Git).  
- Performing other necessary preparations.

## How to request additional third-party system requirements? {#third-party-reqs}

If packages need a **Linux library** that is not available on the server:

 1. Send a pull request (PR) to the [base image](https://github.com/r-universe-org/base-image) for reasonably small or common dependencies.  
 2. Alternatively, send a PR to [rstudio/r-system-requirements](https://github.com/rstudio/r-system-requirements) to resolve the library based on the `SystemRequirements` field in the package `DESCRIPTION` file.  

## How to publish vignettes/articles requiring custom software/tokens to render?

Precompute these vignettes locally before publishing.  
Follow the guide: [How to precompute package vignettes or pkgdown articles](https://ropensci.org/blog/2019/12/08/precompute-vignettes/).  

## Are packages on R-universe required to pass CMD check or meet other criteria?

No, R-universe is an open publishing system. 
It builds and deploys R packages from Git into personal CRAN-like repositories.  

The universe owner is responsible for setting policies and ensuring quality control.  

## How to use a universe on regular continous integration?

If you want to test a package against versions of other packages that are in a universe, on GitHub Actions you can use the [`extra-repositories` field of the `r-lib/actions` setup-r action](https://github.com/r-lib/actions/tree/v2-branch/setup-r#inputs).

---
title: "Trouble shoot package builds"
---

## Is it possible to customize the package build process with custom options/tools/variables?

No, that is not possible (apart from the next section about third-party system requirements). 
Think of R-universe more like your own mini-CRAN. 
The build environment is actually very similar to that of CRAN, if the package can build on CRAN, it will probably work on R-universe.

This is on purpose: we want to make sure that the packages deployed on R-universe are reproducible and will work on the user machine as well, and do not depend on some custom settings or tools.

## What if the git repo is not a ready-to-build source package?

For packages that cannot be build directly from the checkout but need some additional steps, you can add a [script](https://github.com/r-universe-org/build-source/blob/5830b8aa92d5524b3af6d1b617e605d1a2558543/entrypoint.sh#L50-L57) that gets executed before R CMD build at the root of your package:

- either an R script called `bootstrap.R`
- or a shell script called `.prepare`.

Examples of actions performed by the script:

- Initiate a git submodule;
- Run roxygen2 (some authors do not commit the Rd files to git);
- Other prepping.

## How to request additional third party system requirements?

If packages need a **Linux library** that does not yet exist on the server, either:

 - Send a PR to add them to the [base image](https://github.com/r-universe-org/base-image), for reasonably small/common system dependencies.
 
 - Alternatively: send a PR to https://github.com/rstudio/r-system-requirements that resolves the library based on what is in the package DESCRIPTION file under `SystemRequirements`.

## How to publish vignettes/articles which require custom software/tokens to render?

The best solution is to precompute these vignettes on your local machine, see: [How to precompute package vignettes or pkgdown articles](https://ropensci.org/blog/2019/12/08/precompute-vignettes/).


## Are packages on R-universe required to pass CMD check or meet other criteria?

No. 
R-universe is an open publishing system. 
The system just builds and deploys R packages from git into personal cran-like repositories. 
The owner of the universe is responsible for their own policies and quality control.

## How to use a universe on regular continous integration?

If you want to test a package against versions of other packages that are in a universe, on GitHub Actions you can use the [`extra-repositories` field of the `r-lib/actions` setup-r action](https://github.com/r-lib/actions/tree/v2-branch/setup-r#inputs).

---
title: "Trouble shoot package builds"
---

## How often is data updated? {#data-updates}

- The system checks package Git repositories and the registry for changes every hour.  
- If changes are detected:  
   - The workflow starts building the affected packages.  
   - Upon completion, the packages are uploaded to R-universe.  

## Can the package build process be customized with custom options/tools/variables?

No, customization is overall not possible, except for addressing third-party system requirements (covered in the next two sections).  
Think of R-universe as your own mini-CRAN. 
The build environment is very similar to CRAN's, so if a package builds successfully on CRAN, it is likely to work on R-universe.  

This restriction ensures that packages deployed on R-universe are reproducible, work seamlessly on user machines, and do not rely on custom settings or tools.  

## Configure some options with `config.json`

You can create a `config.json` file alongside your `packages.json` file to set some global options.

Currently the only option is `cran_version` which has to be a `yyyy-mm-dd` string and will use dependencies from a certain p3m snapshot date.

```json
{
  "cran_version": "2025-01-15"
}
```

This will set `options(repos = c(CRAN = "https://p3m.dev/cran/2025-01-15"))`

## What if the Git repository  is not a ready-to-build source package?

For repositories requiring additional preparation before building, you can add a [script](https://github.com/r-universe-org/build-source/blob/5830b8aa92d5524b3af6d1b617e605d1a2558543/entrypoint.sh#L50-L57) at the root of the package:  

- An R script named `bootstrap.R`, or  
- A shell script named `.prepare`.

These scripts will be executed before `R CMD build`.

Examples of actions performed by the script:

- Initializing a Git submodule.  
- Running `roxygen2` (if `.Rd` files are not committed to Git).  
- Performing other necessary preparations.

## How to request additional third-party system requirements? {#third-party-reqs}

If packages need a **Linux library** that is not available on the server:

 1. Send a pull request (PR) to the [base image](https://github.com/r-universe-org/base-image) for reasonably small or common dependencies.  
 2. Alternatively, send a PR to [rstudio/r-system-requirements](https://github.com/rstudio/r-system-requirements) to resolve the library based on the `SystemRequirements` field in the package `DESCRIPTION` file.  

## How to publish vignettes/articles requiring custom software/tokens to render?

Precompute these vignettes locally before publishing.  
Follow the guide: [How to precompute package vignettes or pkgdown articles](https://ropensci.org/blog/2019/12/08/precompute-vignettes/).  

## Are packages on R-universe required to pass CMD check or meet other criteria?

No, R-universe is an open publishing system. 
It builds and deploys R packages from Git into personal CRAN-like repositories.  

The universe owner is responsible for setting policies and ensuring quality control.  

## How to use a universe on regular continous integration?

If you want to test a package against versions of other packages that are in a universe, on GitHub Actions you can use the [`extra-repositories` field of the `r-lib/actions` setup-r action](https://github.com/r-lib/actions/tree/v2-branch/setup-r#inputs).

## How to know whether tests are run on R-universe?

During the build, the `MY_UNIVERSE` environment variable is set to the URL of the universe.

## How to handle the transfer of a repository to another GitHub owner?

If a package is on GitHub and possibly CRAN, and on R-Universe through an organization with a [`packages.json`](#registry-file), here is how to best move the package to another GitHub organization:

1. Move the GitHub repository to another organization on GitHub. This will create redirects from the old URL to the new.
2. Remove the package from the original organization's `packages.json`. This will remove it from the original organization's universe.
3. Change the URL in the package DESCRIPTION to the new GitHub organization.
4. If the package is on CRAN, update the package on CRAN with the new URL in DESCRIPTION

Updating the package on CRAN will speed up the process of having R-universe point to the right repository from the CRAN universe. 
Otherwise it could take up to a month for the cran.r-universe.dev/<pkg> to get rebuilt and detect the redirected git origin.

---
title: "Programmatic access (APIs)"
---

R-universe provides several APIs for programmatic access, requiring no authentication.
Thanks to the APIs you can list universes, packages in an universe, get information on packages, perform searches.

You can interact with the API in two ways:  
- Create API calls "manually" in the command-line or R.  
- Use the [universe R package](https://docs.ropensci.org/universe/) available from rOpenSci's R-universe.  

This page demonstrates usage with `{httr2}` or `{universe}` directly.

## Universe-specific APIs

API endpoints start with the universe URL.  
This documentation uses `https://jeroen.r-universe.dev` as an example, but you can replace it with any universe URL.  

### List of all universes

URL: `https://r-universe.dev/stats/everyone`

Example using `{httr2}`:

```{r}
universes <- httr2::request("https://r-universe.dev/stats/everyone") |>
  httr2::req_user_agent("R-universe docs") |>
  httr2::req_perform() |>
  httr2::resp_body_json()
str(universes, max.level = 1)
head(universes[["universes"]])
head(universes[["maintainers"]])
```

Example using `{universe}`:

```{r}
universe::everyone() |> head()
universe::everyone(type = "universes") |> head()
universe::everyone(type = "maintainers") |> head()
```

### List of packages in an universe {#ls}

URL: `https://<username>.r-universe.dev/api/ls`

Example using `{httr2}`:

```{r}
packages <- httr2::request("https://jeroen.r-universe.dev/api/ls") |>
  httr2::req_user_agent("R-universe docs") |>
  httr2::req_perform() |>
  httr2::resp_body_json()
str(packages)
```

Example using `{universe}`:

```{r}
packages <- universe::universe_ls("jeroen")
str(packages)
```
   
### Information of all packages in an universe  

URL: `https://<username>.r-universe.dev/api/packages`

Parameters:

- limit: Maximum number of results (default: 100). Use the [ls endpoint](#ls) to determine the total number of packages and adjust the limit accordingly.

Example using `{httr2}`:

```{r}
packages <- httr2::request("https://jeroen.r-universe.dev/api/packages") |>
  httr2::req_user_agent("R-universe docs") |>
  httr2::req_perform() |>
  httr2::resp_body_json()
# The result is a list of packages
str(packages[[1]], max.level = 1)
```

Example using `{universe}`:

```{r}
packages <- universe::universe_all_packages("jeroen")
# The result is a list of packages
str(packages[[1]], max.level = 1)
```


   
### Information on a single package in an universe {#api-pkg}

URL: `https://<username>.r-universe.dev/api/packages/<package>`

Fields that start with an underscore `_`, like `_topics`, are not present in the `DESCRIPTION` file.
Note that some fields that do **not** start with an underscore (the fields `Repository`, `RemoteUrl`, `RemoteRef` and `RemoteSha`) get automatically inserted in the DESCRIPTION file by our build system. 
These same fields would be added automatically if you install a package using for instance `install_github()`. 
The main purpose is that for instance the renv package will know where to find the source for the package, if it needs to pin an exact version.

Example using `{httr2}`:

```{r}
v8 <- httr2::request("https://jeroen.r-universe.dev/api/packages/V8") |>
  httr2::req_user_agent("R-universe docs") |>
  httr2::req_perform() |>
  httr2::resp_body_json()

str(v8, max.level = 1)
```
   
Example using `{universe}`:

```{r}
V8 <- universe::universe_one_package("jeroen", "V8")
# The result is a list
str(V8, max.level = 1)
```

## Database dump 

URL: `https://<username>.r-universe.dev/api/dbdump`

This API endpoint is not supported by the universe package yet.

```r
ropensci <- mongolite::read_bson('https://ropensci.r-universe.dev/api/dbdump')
```

### Search in an universe

URL: `https://<username>.r-universe.dev/api/search`
Parameters:

- q: Query string (supports [advanced fields](/browse/search.html)).
- limit: Maximum number of results (default: 100). To retrieve all results:
    - Perform an initial query to get the value `total` field.
    - Perform a second query with `limit=total`.

Using `{httr2}`:

How many packages in the rOpenSci universe depend on httr2?

```{r}
deps <- httr2::request("https://ropensci.r-universe.dev/api/search") |>
  httr2::req_url_query(q = 'needs:httr2') |> # packages depending on {httr2}
  httr2::req_user_agent("R-universe docs") |>
  httr2::req_perform() |>
  httr2::resp_body_json()

str(deps, max.level = 1)
deps$total
```

Using `{universe}`:

```{r}
deps <- universe::universe_search("ropensci", query = 'needs:httr2')
# The result is a list of packages
str(deps, max.level = 1)
deps$total
```


## Search all universes {#api-global-search}

URL: `https://r-universe.dev/api/search`
Parameters:

- q: the query string. You can use the [advanced fields](/browse/search.html).
- limit: the number of results to return, by default a maximum of 100 but you can
    - do a first request to determine the total number of hits `N`, returned in the response as the `total` field,
    - then do a second request using `limit=N`.

Example using `{httr2}`:

```{r}
packages <- httr2::request("https://r-universe.dev/api/search") |>
  httr2::req_url_query(q = '"weather data"') |>
  httr2::req_user_agent("R-universe docs") |>
  httr2::req_perform() |>
  httr2::resp_body_json()
str(packages, max.level = 1)
str(packages$results[[1]])
```

Example using `{universe}`:

```{r}
packages <- universe::global_search(query = '"weather data"', limit = 100L)
str(packages, max.level = 1)
str(packages$results[[1]])
```

Note that searching globally only returns "indexed" packages: if a package is included in several universes, it still shows up only once in search results because of our [deduplication efforts](#deduplication).

## Database dump (all universes)

URL: `https://r-universe.dev/api/dbdump`

This API endpoint is not supported by the universe package yet.

```r
dump <- mongolite::read_bson('https://r-universe.dev/api/dbdump')
```

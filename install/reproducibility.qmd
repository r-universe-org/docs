---
title: "Reproducibility"
---

## Does R-universe archive old versions of packages? How does it work with renv?

R-universe does not archive old versions of packages, but it **tracks the upstream git URL and commit ID** in the R package description. This allows tools like `renv` to restore packages in environments that were installed from R-universe. For more details, see this tech note: [How renv restores packages from r-universe for reproducibility or production](https://ropensci.org/blog/2022/01/06/runiverse-renv/).  

You can also **archive fixed versions of a universe** for production or reproducibility, using what we call [repository snapshots](#snapshots).  

## Repository snapshots {#snapshots}

### What is a snapshot of an universe?

A snapshot is a standard layout of a few directories consisting of static files containing binaries, source packages, and indexing files.  
Snapshots allow you to host **fixed versions of packages** and install them as needed.

### Downloading repository snapshots

The snapshot API lets you download a full copy of any repository on R-universe.  
You can use this snapshot to mirror the CRAN-like repository on your own servers or to build a stable, validated release of your package suite.  

The API endpoint is `/api/snapshot` and has several options to filter content.
By default, the endpoint returns a zip file with all the repository’s packages, binaries, and documentation.
If needed, you can filter the content to include only specific binaries, R versions, or subsets of packages.  

Explore the API parameters for your universe, for instance <https://ggseg.r-universe.dev/apis>.  

### Using snapshots

A CRAN-like R package repository is essentially a static directory of package files and indexes, with a specific naming structure. 
R-universe automatically builds and updates all these files based on a registry of packages and upstream git sources. 
Once everything is generated, you can simply copy the entire folder elsewhere, and have a frozen CRAN-like package repository on that server.
For instance...

- An organization could host a mirror of their repository internally in their intranet. They could update the mirror every day, every month, etc.

- You could create a GitHub Action which regularly downloads a snapshot from R-universe to publish on github-pages. 
Here is a minimal example of such an action: https://github.com/jeroen/backup. 

Note how the aforementioned action is very fast: **downloading and extracting the snapshot from R-universe only takes a few seconds**. 
So this is easily something that could be done on demand, or automatically on a regular basis.

You can also install packages in R directly from a local snapshot folder, by prefixing the path that you pass to `install.packages` with `file://` (Windows paths need to be normalized to look more unixy):

```r
# Download and extract the snapshot
curl::curl_download("https://jeroen.r-universe.dev/api/snapshot/zip?binaries=4.3", "snapshot.zip")
snapshot <- file.path(tempdir(), 'jeroen')
unzip("snapshot.zip", exdir = snapshot)

# Install packages from the local repository
prefix <- ifelse (.Platform$OS.type == "windows", "file:///", "file://")
repos <- paste0(prefix, normalizePath(snapshot, "/"))
install.packages(c("V8", "mongolite"), repos = repos)
```

## Mirroring a universe {#mirror}

As an alternative to snapshots, one can mirror a universe with [Rclone](https://rclone.org/).

### Configuration

[Rclone](https://rclone.org/) can bypass the R-universe zip archive API and incrementally download the individual files from a universe.
After [installing Rclone](https://rclone.org/install/), use a terminal command to configure [Rclone](https://rclone.org/) to use the R-universe [S3](https://rclone.org/s3/) API:

```bash
rclone config create r-universe s3 \
  list_version=2 force_path_style=false \
  endpoint=https://r-universe.dev provider=Other
```

Then, register an individual universe as an [Rclone remote](https://rclone.org/remote_setup/).
For example, let's configure <https://maelle.r-universe.dev>.
We run an `rclone config` command that chooses `maelle` as the universe and `maelle-universe` as the alias that future [Rclone](https://rclone.org/) commands will use:

```bash
rclone config create maelle-universe alias remote=r-universe:maelle
```

`rclone config show` should now show the following contents:^[Rclone configuration is stored in an `rclone.conf` text file located at the path returned by `rclone config file`.]

```
[r-universe]
type = s3
list_version = 2
force_path_style = false
endpoint = https://r-universe.dev
provider = Other

[maelle-universe]
type = alias
remote = r-universe:maelle
```

### Local downloads

After configuration, [Rclone](https://rclone.org/) can download from the universe you configured.
The following [`rclone copy`](https://rclone.org/commands/rclone_copy/) command downloads all the package files from <https://maelle.r-universe.dev> to a local folder called `local_foldder_name`:

```bash
rclone copy maelle-universe: local_folder_name \
  --ignore-size --progress \
  --checkers 8 --transfers 8
```

The full contents are available:

```r
fs::dir_tree("local_folder_name", recurse = FALSE)
#> local_folder_name
#> ├── bin
#> └── src
```

```r
fs::dir_tree("local_folder_name/src", recurse = TRUE)
#> local_folder_name/src
#> └── contrib
#>     ├── PACKAGES
#>     ├── PACKAGES.gz
#>     ├── cransays_0.0.0.9000.tar.gz
#>     ├── glitter_0.2.999.tar.gz
#>     └── roblog_0.1.0.tar.gz
```
